// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  channel: (where?: ChannelWhereInput) => Promise<boolean>;
  shitpost: (where?: ShitpostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  channel: (where: ChannelWhereUniqueInput) => ChannelNullablePromise;
  channels: (args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Channel>;
  channelsConnection: (args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChannelConnectionPromise;
  shitpost: (where: ShitpostWhereUniqueInput) => ShitpostNullablePromise;
  shitposts: (args?: {
    where?: ShitpostWhereInput;
    orderBy?: ShitpostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Shitpost>;
  shitpostsConnection: (args?: {
    where?: ShitpostWhereInput;
    orderBy?: ShitpostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ShitpostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChannel: (data: ChannelCreateInput) => ChannelPromise;
  updateChannel: (args: {
    data: ChannelUpdateInput;
    where: ChannelWhereUniqueInput;
  }) => ChannelPromise;
  upsertChannel: (args: {
    where: ChannelWhereUniqueInput;
    create: ChannelCreateInput;
    update: ChannelUpdateInput;
  }) => ChannelPromise;
  deleteChannel: (where: ChannelWhereUniqueInput) => ChannelPromise;
  deleteManyChannels: (where?: ChannelWhereInput) => BatchPayloadPromise;
  createShitpost: (data: ShitpostCreateInput) => ShitpostPromise;
  updateShitpost: (args: {
    data: ShitpostUpdateInput;
    where: ShitpostWhereUniqueInput;
  }) => ShitpostPromise;
  updateManyShitposts: (args: {
    data: ShitpostUpdateManyMutationInput;
    where?: ShitpostWhereInput;
  }) => BatchPayloadPromise;
  upsertShitpost: (args: {
    where: ShitpostWhereUniqueInput;
    create: ShitpostCreateInput;
    update: ShitpostUpdateInput;
  }) => ShitpostPromise;
  deleteShitpost: (where: ShitpostWhereUniqueInput) => ShitpostPromise;
  deleteManyShitposts: (where?: ShitpostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  channel: (
    where?: ChannelSubscriptionWhereInput
  ) => ChannelSubscriptionPayloadSubscription;
  shitpost: (
    where?: ShitpostSubscriptionWhereInput
  ) => ShitpostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ChannelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type ShitpostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "encryptedContent_ASC"
  | "encryptedContent_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ChannelWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChannelWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  shitposts_every?: Maybe<ShitpostWhereInput>;
  shitposts_some?: Maybe<ShitpostWhereInput>;
  shitposts_none?: Maybe<ShitpostWhereInput>;
  AND?: Maybe<ChannelWhereInput[] | ChannelWhereInput>;
  OR?: Maybe<ChannelWhereInput[] | ChannelWhereInput>;
  NOT?: Maybe<ChannelWhereInput[] | ChannelWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  memberOfChannels_every?: Maybe<ChannelWhereInput>;
  memberOfChannels_some?: Maybe<ChannelWhereInput>;
  memberOfChannels_none?: Maybe<ChannelWhereInput>;
  ownerOfChannels_every?: Maybe<ChannelWhereInput>;
  ownerOfChannels_some?: Maybe<ChannelWhereInput>;
  ownerOfChannels_none?: Maybe<ChannelWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ShitpostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  postedBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  encryptedContent?: Maybe<String>;
  encryptedContent_not?: Maybe<String>;
  encryptedContent_in?: Maybe<String[] | String>;
  encryptedContent_not_in?: Maybe<String[] | String>;
  encryptedContent_lt?: Maybe<String>;
  encryptedContent_lte?: Maybe<String>;
  encryptedContent_gt?: Maybe<String>;
  encryptedContent_gte?: Maybe<String>;
  encryptedContent_contains?: Maybe<String>;
  encryptedContent_not_contains?: Maybe<String>;
  encryptedContent_starts_with?: Maybe<String>;
  encryptedContent_not_starts_with?: Maybe<String>;
  encryptedContent_ends_with?: Maybe<String>;
  encryptedContent_not_ends_with?: Maybe<String>;
  channel?: Maybe<ChannelWhereInput>;
  AND?: Maybe<ShitpostWhereInput[] | ShitpostWhereInput>;
  OR?: Maybe<ShitpostWhereInput[] | ShitpostWhereInput>;
  NOT?: Maybe<ShitpostWhereInput[] | ShitpostWhereInput>;
}

export type ShitpostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChannelCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutOwnerOfChannelsInput;
  members?: Maybe<UserCreateManyWithoutMemberOfChannelsInput>;
  shitposts?: Maybe<ShitpostCreateManyWithoutChannelInput>;
}

export interface UserCreateOneWithoutOwnerOfChannelsInput {
  create?: Maybe<UserCreateWithoutOwnerOfChannelsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutOwnerOfChannelsInput {
  id?: Maybe<ID_Input>;
  name: String;
  memberOfChannels?: Maybe<ChannelCreateManyWithoutMembersInput>;
}

export interface ChannelCreateManyWithoutMembersInput {
  create?: Maybe<
    ChannelCreateWithoutMembersInput[] | ChannelCreateWithoutMembersInput
  >;
  connect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
}

export interface ChannelCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutOwnerOfChannelsInput;
  shitposts?: Maybe<ShitpostCreateManyWithoutChannelInput>;
}

export interface ShitpostCreateManyWithoutChannelInput {
  create?: Maybe<
    ShitpostCreateWithoutChannelInput[] | ShitpostCreateWithoutChannelInput
  >;
  connect?: Maybe<ShitpostWhereUniqueInput[] | ShitpostWhereUniqueInput>;
}

export interface ShitpostCreateWithoutChannelInput {
  id?: Maybe<ID_Input>;
  postedBy: UserCreateOneInput;
  encryptedContent: String;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  memberOfChannels?: Maybe<ChannelCreateManyWithoutMembersInput>;
  ownerOfChannels?: Maybe<ChannelCreateManyWithoutOwnerInput>;
}

export interface ChannelCreateManyWithoutOwnerInput {
  create?: Maybe<
    ChannelCreateWithoutOwnerInput[] | ChannelCreateWithoutOwnerInput
  >;
  connect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
}

export interface ChannelCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  members?: Maybe<UserCreateManyWithoutMemberOfChannelsInput>;
  shitposts?: Maybe<ShitpostCreateManyWithoutChannelInput>;
}

export interface UserCreateManyWithoutMemberOfChannelsInput {
  create?: Maybe<
    | UserCreateWithoutMemberOfChannelsInput[]
    | UserCreateWithoutMemberOfChannelsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutMemberOfChannelsInput {
  id?: Maybe<ID_Input>;
  name: String;
  ownerOfChannels?: Maybe<ChannelCreateManyWithoutOwnerInput>;
}

export interface ChannelUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutOwnerOfChannelsInput>;
  members?: Maybe<UserUpdateManyWithoutMemberOfChannelsInput>;
  shitposts?: Maybe<ShitpostUpdateManyWithoutChannelInput>;
}

export interface UserUpdateOneRequiredWithoutOwnerOfChannelsInput {
  create?: Maybe<UserCreateWithoutOwnerOfChannelsInput>;
  update?: Maybe<UserUpdateWithoutOwnerOfChannelsDataInput>;
  upsert?: Maybe<UserUpsertWithoutOwnerOfChannelsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutOwnerOfChannelsDataInput {
  name?: Maybe<String>;
  memberOfChannels?: Maybe<ChannelUpdateManyWithoutMembersInput>;
}

export interface ChannelUpdateManyWithoutMembersInput {
  create?: Maybe<
    ChannelCreateWithoutMembersInput[] | ChannelCreateWithoutMembersInput
  >;
  delete?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  connect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  set?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  disconnect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  update?: Maybe<
    | ChannelUpdateWithWhereUniqueWithoutMembersInput[]
    | ChannelUpdateWithWhereUniqueWithoutMembersInput
  >;
  upsert?: Maybe<
    | ChannelUpsertWithWhereUniqueWithoutMembersInput[]
    | ChannelUpsertWithWhereUniqueWithoutMembersInput
  >;
  deleteMany?: Maybe<ChannelScalarWhereInput[] | ChannelScalarWhereInput>;
}

export interface ChannelUpdateWithWhereUniqueWithoutMembersInput {
  where: ChannelWhereUniqueInput;
  data: ChannelUpdateWithoutMembersDataInput;
}

export interface ChannelUpdateWithoutMembersDataInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutOwnerOfChannelsInput>;
  shitposts?: Maybe<ShitpostUpdateManyWithoutChannelInput>;
}

export interface ShitpostUpdateManyWithoutChannelInput {
  create?: Maybe<
    ShitpostCreateWithoutChannelInput[] | ShitpostCreateWithoutChannelInput
  >;
  delete?: Maybe<ShitpostWhereUniqueInput[] | ShitpostWhereUniqueInput>;
  connect?: Maybe<ShitpostWhereUniqueInput[] | ShitpostWhereUniqueInput>;
  set?: Maybe<ShitpostWhereUniqueInput[] | ShitpostWhereUniqueInput>;
  disconnect?: Maybe<ShitpostWhereUniqueInput[] | ShitpostWhereUniqueInput>;
  update?: Maybe<
    | ShitpostUpdateWithWhereUniqueWithoutChannelInput[]
    | ShitpostUpdateWithWhereUniqueWithoutChannelInput
  >;
  upsert?: Maybe<
    | ShitpostUpsertWithWhereUniqueWithoutChannelInput[]
    | ShitpostUpsertWithWhereUniqueWithoutChannelInput
  >;
  deleteMany?: Maybe<ShitpostScalarWhereInput[] | ShitpostScalarWhereInput>;
  updateMany?: Maybe<
    | ShitpostUpdateManyWithWhereNestedInput[]
    | ShitpostUpdateManyWithWhereNestedInput
  >;
}

export interface ShitpostUpdateWithWhereUniqueWithoutChannelInput {
  where: ShitpostWhereUniqueInput;
  data: ShitpostUpdateWithoutChannelDataInput;
}

export interface ShitpostUpdateWithoutChannelDataInput {
  postedBy?: Maybe<UserUpdateOneRequiredInput>;
  encryptedContent?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  memberOfChannels?: Maybe<ChannelUpdateManyWithoutMembersInput>;
  ownerOfChannels?: Maybe<ChannelUpdateManyWithoutOwnerInput>;
}

export interface ChannelUpdateManyWithoutOwnerInput {
  create?: Maybe<
    ChannelCreateWithoutOwnerInput[] | ChannelCreateWithoutOwnerInput
  >;
  delete?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  connect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  set?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  disconnect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  update?: Maybe<
    | ChannelUpdateWithWhereUniqueWithoutOwnerInput[]
    | ChannelUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | ChannelUpsertWithWhereUniqueWithoutOwnerInput[]
    | ChannelUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<ChannelScalarWhereInput[] | ChannelScalarWhereInput>;
}

export interface ChannelUpdateWithWhereUniqueWithoutOwnerInput {
  where: ChannelWhereUniqueInput;
  data: ChannelUpdateWithoutOwnerDataInput;
}

export interface ChannelUpdateWithoutOwnerDataInput {
  members?: Maybe<UserUpdateManyWithoutMemberOfChannelsInput>;
  shitposts?: Maybe<ShitpostUpdateManyWithoutChannelInput>;
}

export interface UserUpdateManyWithoutMemberOfChannelsInput {
  create?: Maybe<
    | UserCreateWithoutMemberOfChannelsInput[]
    | UserCreateWithoutMemberOfChannelsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutMemberOfChannelsInput[]
    | UserUpdateWithWhereUniqueWithoutMemberOfChannelsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutMemberOfChannelsInput[]
    | UserUpsertWithWhereUniqueWithoutMemberOfChannelsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutMemberOfChannelsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutMemberOfChannelsDataInput;
}

export interface UserUpdateWithoutMemberOfChannelsDataInput {
  name?: Maybe<String>;
  ownerOfChannels?: Maybe<ChannelUpdateManyWithoutOwnerInput>;
}

export interface UserUpsertWithWhereUniqueWithoutMemberOfChannelsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutMemberOfChannelsDataInput;
  create: UserCreateWithoutMemberOfChannelsInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ChannelUpsertWithWhereUniqueWithoutOwnerInput {
  where: ChannelWhereUniqueInput;
  update: ChannelUpdateWithoutOwnerDataInput;
  create: ChannelCreateWithoutOwnerInput;
}

export interface ChannelScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ChannelScalarWhereInput[] | ChannelScalarWhereInput>;
  OR?: Maybe<ChannelScalarWhereInput[] | ChannelScalarWhereInput>;
  NOT?: Maybe<ChannelScalarWhereInput[] | ChannelScalarWhereInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ShitpostUpsertWithWhereUniqueWithoutChannelInput {
  where: ShitpostWhereUniqueInput;
  update: ShitpostUpdateWithoutChannelDataInput;
  create: ShitpostCreateWithoutChannelInput;
}

export interface ShitpostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  encryptedContent?: Maybe<String>;
  encryptedContent_not?: Maybe<String>;
  encryptedContent_in?: Maybe<String[] | String>;
  encryptedContent_not_in?: Maybe<String[] | String>;
  encryptedContent_lt?: Maybe<String>;
  encryptedContent_lte?: Maybe<String>;
  encryptedContent_gt?: Maybe<String>;
  encryptedContent_gte?: Maybe<String>;
  encryptedContent_contains?: Maybe<String>;
  encryptedContent_not_contains?: Maybe<String>;
  encryptedContent_starts_with?: Maybe<String>;
  encryptedContent_not_starts_with?: Maybe<String>;
  encryptedContent_ends_with?: Maybe<String>;
  encryptedContent_not_ends_with?: Maybe<String>;
  AND?: Maybe<ShitpostScalarWhereInput[] | ShitpostScalarWhereInput>;
  OR?: Maybe<ShitpostScalarWhereInput[] | ShitpostScalarWhereInput>;
  NOT?: Maybe<ShitpostScalarWhereInput[] | ShitpostScalarWhereInput>;
}

export interface ShitpostUpdateManyWithWhereNestedInput {
  where: ShitpostScalarWhereInput;
  data: ShitpostUpdateManyDataInput;
}

export interface ShitpostUpdateManyDataInput {
  encryptedContent?: Maybe<String>;
}

export interface ChannelUpsertWithWhereUniqueWithoutMembersInput {
  where: ChannelWhereUniqueInput;
  update: ChannelUpdateWithoutMembersDataInput;
  create: ChannelCreateWithoutMembersInput;
}

export interface UserUpsertWithoutOwnerOfChannelsInput {
  update: UserUpdateWithoutOwnerOfChannelsDataInput;
  create: UserCreateWithoutOwnerOfChannelsInput;
}

export interface ShitpostCreateInput {
  id?: Maybe<ID_Input>;
  postedBy: UserCreateOneInput;
  encryptedContent: String;
  channel: ChannelCreateOneWithoutShitpostsInput;
}

export interface ChannelCreateOneWithoutShitpostsInput {
  create?: Maybe<ChannelCreateWithoutShitpostsInput>;
  connect?: Maybe<ChannelWhereUniqueInput>;
}

export interface ChannelCreateWithoutShitpostsInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutOwnerOfChannelsInput;
  members?: Maybe<UserCreateManyWithoutMemberOfChannelsInput>;
}

export interface ShitpostUpdateInput {
  postedBy?: Maybe<UserUpdateOneRequiredInput>;
  encryptedContent?: Maybe<String>;
  channel?: Maybe<ChannelUpdateOneRequiredWithoutShitpostsInput>;
}

export interface ChannelUpdateOneRequiredWithoutShitpostsInput {
  create?: Maybe<ChannelCreateWithoutShitpostsInput>;
  update?: Maybe<ChannelUpdateWithoutShitpostsDataInput>;
  upsert?: Maybe<ChannelUpsertWithoutShitpostsInput>;
  connect?: Maybe<ChannelWhereUniqueInput>;
}

export interface ChannelUpdateWithoutShitpostsDataInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutOwnerOfChannelsInput>;
  members?: Maybe<UserUpdateManyWithoutMemberOfChannelsInput>;
}

export interface ChannelUpsertWithoutShitpostsInput {
  update: ChannelUpdateWithoutShitpostsDataInput;
  create: ChannelCreateWithoutShitpostsInput;
}

export interface ShitpostUpdateManyMutationInput {
  encryptedContent?: Maybe<String>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  memberOfChannels?: Maybe<ChannelUpdateManyWithoutMembersInput>;
  ownerOfChannels?: Maybe<ChannelUpdateManyWithoutOwnerInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ChannelSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChannelWhereInput>;
  AND?: Maybe<ChannelSubscriptionWhereInput[] | ChannelSubscriptionWhereInput>;
  OR?: Maybe<ChannelSubscriptionWhereInput[] | ChannelSubscriptionWhereInput>;
  NOT?: Maybe<ChannelSubscriptionWhereInput[] | ChannelSubscriptionWhereInput>;
}

export interface ShitpostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ShitpostWhereInput>;
  AND?: Maybe<
    ShitpostSubscriptionWhereInput[] | ShitpostSubscriptionWhereInput
  >;
  OR?: Maybe<ShitpostSubscriptionWhereInput[] | ShitpostSubscriptionWhereInput>;
  NOT?: Maybe<
    ShitpostSubscriptionWhereInput[] | ShitpostSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Channel {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface ChannelPromise extends Promise<Channel>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shitposts: <T = FragmentableArray<Shitpost>>(args?: {
    where?: ShitpostWhereInput;
    orderBy?: ShitpostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChannelSubscription
  extends Promise<AsyncIterator<Channel>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shitposts: <T = Promise<AsyncIterator<ShitpostSubscription>>>(args?: {
    where?: ShitpostWhereInput;
    orderBy?: ShitpostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChannelNullablePromise
  extends Promise<Channel | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shitposts: <T = FragmentableArray<Shitpost>>(args?: {
    where?: ShitpostWhereInput;
    orderBy?: ShitpostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  memberOfChannels: <T = FragmentableArray<Channel>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ownerOfChannels: <T = FragmentableArray<Channel>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  memberOfChannels: <T = Promise<AsyncIterator<ChannelSubscription>>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ownerOfChannels: <T = Promise<AsyncIterator<ChannelSubscription>>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  memberOfChannels: <T = FragmentableArray<Channel>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ownerOfChannels: <T = FragmentableArray<Channel>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Shitpost {
  id: ID_Output;
  createdAt: DateTimeOutput;
  encryptedContent: String;
}

export interface ShitpostPromise extends Promise<Shitpost>, Fragmentable {
  id: () => Promise<ID_Output>;
  postedBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  encryptedContent: () => Promise<String>;
  channel: <T = ChannelPromise>() => T;
}

export interface ShitpostSubscription
  extends Promise<AsyncIterator<Shitpost>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  postedBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  encryptedContent: () => Promise<AsyncIterator<String>>;
  channel: <T = ChannelSubscription>() => T;
}

export interface ShitpostNullablePromise
  extends Promise<Shitpost | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  postedBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  encryptedContent: () => Promise<String>;
  channel: <T = ChannelPromise>() => T;
}

export interface ChannelConnection {
  pageInfo: PageInfo;
  edges: ChannelEdge[];
}

export interface ChannelConnectionPromise
  extends Promise<ChannelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChannelEdge>>() => T;
  aggregate: <T = AggregateChannelPromise>() => T;
}

export interface ChannelConnectionSubscription
  extends Promise<AsyncIterator<ChannelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChannelEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChannelSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChannelEdge {
  node: Channel;
  cursor: String;
}

export interface ChannelEdgePromise extends Promise<ChannelEdge>, Fragmentable {
  node: <T = ChannelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChannelEdgeSubscription
  extends Promise<AsyncIterator<ChannelEdge>>,
    Fragmentable {
  node: <T = ChannelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChannel {
  count: Int;
}

export interface AggregateChannelPromise
  extends Promise<AggregateChannel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChannelSubscription
  extends Promise<AsyncIterator<AggregateChannel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ShitpostConnection {
  pageInfo: PageInfo;
  edges: ShitpostEdge[];
}

export interface ShitpostConnectionPromise
  extends Promise<ShitpostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShitpostEdge>>() => T;
  aggregate: <T = AggregateShitpostPromise>() => T;
}

export interface ShitpostConnectionSubscription
  extends Promise<AsyncIterator<ShitpostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShitpostEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShitpostSubscription>() => T;
}

export interface ShitpostEdge {
  node: Shitpost;
  cursor: String;
}

export interface ShitpostEdgePromise
  extends Promise<ShitpostEdge>,
    Fragmentable {
  node: <T = ShitpostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShitpostEdgeSubscription
  extends Promise<AsyncIterator<ShitpostEdge>>,
    Fragmentable {
  node: <T = ShitpostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateShitpost {
  count: Int;
}

export interface AggregateShitpostPromise
  extends Promise<AggregateShitpost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShitpostSubscription
  extends Promise<AsyncIterator<AggregateShitpost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ChannelSubscriptionPayload {
  mutation: MutationType;
  node: Channel;
  updatedFields: String[];
  previousValues: ChannelPreviousValues;
}

export interface ChannelSubscriptionPayloadPromise
  extends Promise<ChannelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChannelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChannelPreviousValuesPromise>() => T;
}

export interface ChannelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChannelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChannelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChannelPreviousValuesSubscription>() => T;
}

export interface ChannelPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface ChannelPreviousValuesPromise
  extends Promise<ChannelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ChannelPreviousValuesSubscription
  extends Promise<AsyncIterator<ChannelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ShitpostSubscriptionPayload {
  mutation: MutationType;
  node: Shitpost;
  updatedFields: String[];
  previousValues: ShitpostPreviousValues;
}

export interface ShitpostSubscriptionPayloadPromise
  extends Promise<ShitpostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ShitpostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShitpostPreviousValuesPromise>() => T;
}

export interface ShitpostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShitpostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShitpostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShitpostPreviousValuesSubscription>() => T;
}

export interface ShitpostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  encryptedContent: String;
}

export interface ShitpostPreviousValuesPromise
  extends Promise<ShitpostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  encryptedContent: () => Promise<String>;
}

export interface ShitpostPreviousValuesSubscription
  extends Promise<AsyncIterator<ShitpostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  encryptedContent: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Shitpost",
    embedded: false
  },
  {
    name: "Channel",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
